events {
    worker_connections 1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;
        listen [::]:80;
        server_name flamewall.xyz www.flamewall.xyz;
        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2;
        server_name flamewall.xyz www.flamewall.xyz;

        # --- ВОЗВРАЩАЕМ КРИТИЧЕСКИ ВАЖНУЮ СТРОКУ ---
        # Эта строка - внутренний DNS-сервер Docker.
        # Она нужна Nginx, чтобы находить другие контейнеры (backend, frontend).
        resolver 127.0.0.11 valid=10s;

        ssl_certificate /etc/letsencrypt/live/flamewall.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/flamewall.xyz/privkey.pem;

          location /uploads/ {
             # alias указывает на точное место, где лежат файлы внутри контейнера Nginx
             alias /usr/share/nginx/html/uploads/;
             # Эта директива пытается найти файл по запрошенному URI. Если не находит - отдает 404.
             try_files $uri =404;
             # Говорим браузерам, что эти файлы можно кэшировать
             expires 7d;
             add_header Cache-Control "public";
        }

        location /api/ {
            # proxy_pass будет работать, только если Nginx знает, кто такой 'backend'
            proxy_pass http://backend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /socket.io/ {
            proxy_pass http://backend:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}