# root Flamewall/nginx/nginx.prod.conf
# Задает параметры обработки соединений. Обязательный блок для Nginx.
events {
    worker_connections 1024;
}

# Обертка для всех HTTP-серверов.
http {
    # Cервер для перенаправления с HTTP на HTTPS
    server {
        listen 80;
        listen [::]:80;
        # Указываем доменные имена, для которых работает этот сервер
        server_name flamewall.xyz www.flamewall.xyz;

        # Этот location нужен для Certbot, чтобы он мог автоматически обновлять сертификаты.
        # Он проверяет наличие файла в этой директории.
        location ~ /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }

        # Все остальные запросы (кроме проверки Certbot) перенаправляем с HTTP на HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Основной сервер, который работает по HTTPS и обрабатывает все запросы к приложению
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name flamewall.online www.flamewall.online;

        # Пути к SSL сертификатам, сгенерированным Certbot
        ssl_certificate /etc/letsencrypt/live/flamewall.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/flamewall.online/privkey.pem;

        # Проксирование всех корневых запросов (например, главная страница) на фронтенд
        location / {
            proxy_pass http://frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # --- ФИНАЛЬНОЕ ИСПРАВЛЕНИЕ: ПРИКАЗЫВАЕМ ГЛАВНОМУ ПРОКСИ НЕ КЕШИРОВАТЬ ---
            proxy_buffering off; # Отключаем буферизацию ответа
            proxy_cache_bypass $http_upgrade; # Не использовать кеш для WebSocket
            add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
            expires 0;
            add_header Pragma 'no-cache';
        }

        # Проксирование запросов к API на бэкенд
        location /api/ {
            proxy_pass http://backend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Проксирование запросов для WebSocket-чата на бэкенд
        location /socket.io/ {
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }

        # Проксирование запросов к загруженным файлам (например, аватарам) на бэкенд
        location /uploads/ {
            alias /usr/share/nginx/html/uploads/;
            access_log off;
            expires 7d;
            add_header Cache-Control "public";
        }
    }
}